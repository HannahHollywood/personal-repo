{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red246\green246\blue239;\red252\green93\blue186;\red30\green31\blue41;
\red246\green246\blue239;\red72\green255\blue104;\red253\green170\blue90;\red80\green93\blue147;\red174\green122\blue247;
\red124\green228\blue252;}
{\*\expandedcolortbl;;\cssrgb\c97255\c97255\c94902;\cssrgb\c100000\c47451\c77647;\cssrgb\c15686\c16471\c21176;
\cssrgb\c97255\c97255\c94902;\cssrgb\c31373\c98039\c48235;\cssrgb\c100000\c72157\c42353;\cssrgb\c38431\c44706\c64314;\cssrgb\c74118\c57647\c97647;
\cssrgb\c54510\c91373\c99216;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15580\viewh13940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 [Step 1. Define our problem]\
\
1. Find the smallest number in the list\
2. Print out which position it is in the list\
\
***NOTE: If an empty list is supplied then we must return an empty tuple***\
\
\
[Step 2. What tools do we need to work with?]\
\
Lists\
Tuples\
Loop (For)\
IF-THEN-ELSE\
Standardise Data to Float()\
\
\
[Step 3. Inputs, Outputs, Imports, Exports)\
\
Inputs:\
- N/A\
\
Outputs:\
- N/A\
\
Imports:\
- weather_data (List of numbers)\
\
Exports:\
- Smallest number in the list and its position (Tuple)\
\
\
[Step 4. Pseudo Code]\
\
FUNCTION NAME: find_min\
IMPORTS: weather_data (List)\
EXPORTS: min_value (Tuple)\
\
DEPENDS ON\'85\
* \{function, importing a library, file, connectivity\}\
\
CALLS\'85\
* FUNCTION_NAME(<\'97 vars we supply; \'97> stuff we get out)\
\
VARS:\
* index_position (int) <<< represent the current index we\'92re in\
* lowest_value (int) <<< initialise to null, indicates that we are on the first index of the list\
* lowest_index (int) <<< represents the index associated with lowest_value\
* current_value (int) <<< maybe don\'92t need\
\
\
ALGORITHM:\
\
	index_position = 0\
	lowest_value = NONE\
	\
	IF weather_data isn\'92t empty THEN:\
\
		FOR current_value in weather_data DO:\
\
			current_value = FLOAT(current_value)\
\
			IF lowest_value is NONE THEN:\
				lowest_value = current_value ; because we have nothing to compare stuff to\
\
			ELIF current_value LESS THAN OR EQUAL TO lowest_value THEN:\
				lowest_value = current_value\
				lowest_index = index_position\
\
			index_position += 1 ; increment by one\
\
		END FOR\
\
		min_value =  (lowest_value, index_position)\
\
	ELSE:\
\
		min_value = ()\
\
\
	RETURN min_value\

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def\cf5 \strokec5  \cf6 \strokec6 find_min\cf5 \strokec5 (
\f2\i \cf7 \strokec7 weather_data
\f1\i0 \cf5 \strokec5 ):\cb1 \
\
\cb4     \cf8 \strokec8 # create variables for the following:\cf5 \cb1 \strokec5 \
\cb4     index_position \cf3 \strokec3 =\cf5 \strokec5  \cf9 \strokec9 0\cf5 \cb1 \strokec5 \
\cb4     lowest_index \cf3 \strokec3 =\cf5 \strokec5  \cf9 \strokec9 None\cf5 \cb1 \strokec5 \
\cb4     lowest_value \cf3 \strokec3 =\cf5 \strokec5  \cf9 \strokec9 None\cf5 \cb1 \strokec5 \
\
\cb4     \cf8 \strokec8 # Specify != 0 because we know length is positive when the list has stuff in it\cf5 \cb1 \strokec5 \
\cb4     \cf3 \strokec3 if\cf5 \strokec5 (\cf6 \strokec6 len\cf5 \strokec5 (
\f2\i \cf7 \strokec7 weather_data
\f1\i0 \cf5 \strokec5 ) \cf3 \strokec3 !=\cf5 \strokec5  \cf9 \strokec9 0\cf5 \strokec5 ):\cb1 \
\
\cb4         \cf3 \strokec3 for\cf5 \strokec5  current_value \cf3 \strokec3 in\cf5 \strokec5  
\f2\i \cf7 \strokec7 weather_data
\f1\i0 \cf5 \strokec5 :\cb1 \
\
\cb4             \cf8 \strokec8 # Avoid issues where we have mixed ints, strings, and floats\cf5 \cb1 \strokec5 \
\cb4             current_value \cf3 \strokec3 =\cf5 \strokec5  \cf10 \strokec10 float\cf5 \strokec5 (current_value)\cb1 \
\
\cb4             \cf8 \strokec8 # Do this for the first index because we do not have anything to compare to\cf5 \cb1 \strokec5 \
\cb4             \cf3 \strokec3 if\cf5 \strokec5 (lowest_value \cf3 \strokec3 is\cf5 \strokec5  \cf9 \strokec9 None\cf5 \strokec5 ):\cb1 \
\cb4                 lowest_value \cf3 \strokec3 =\cf5 \strokec5  current_value\cb1 \
\cb4                 lowest_index \cf3 \strokec3 =\cf5 \strokec5  \cf9 \strokec9 0\cf5 \cb1 \strokec5 \
\
\cb4             \cf3 \strokec3 elif\cf5 \strokec5 (current_value \cf3 \strokec3 <=\cf5 \strokec5  lowest_value):\cb1 \
\cb4                 lowest_value \cf3 \strokec3 =\cf5 \strokec5  current_value\cb1 \
\cb4                 lowest_index \cf3 \strokec3 =\cf5 \strokec5  index_position\cb1 \
\
\cb4             \cf8 \strokec8 # Local Debug required for the Commit:\cf5 \cb1 \strokec5 \
\cb4             \cf8 \strokec8 # print(f"Index Position is: \{index_position\}")\cf5 \cb1 \strokec5 \
\cb4             \cf8 \strokec8 # print(f"Lowest Index is: \{lowest_index\}")\cf5 \cb1 \strokec5 \
\
\cb4             \cf8 \strokec8 # Increment by one to keep track of where we are in the list\cf5 \cb1 \strokec5 \
\cb4             index_position \cf3 \strokec3 +=\cf5 \strokec5  \cf9 \strokec9 1\cf5 \cb1 \strokec5 \
\
\cb4         \cf8 \strokec8 # Create a tuple\cf5 \cb1 \strokec5 \
\cb4         min_value \cf3 \strokec3 =\cf5 \strokec5  (lowest_value, lowest_index)\cb1 \
\
\cb4         \cf8 \strokec8 # Local Debug required for Commit:\cf5 \cb1 \strokec5 \
\cb4         \cf8 \strokec8 # print(f"Min Value Found as \{lowest_value\}")\cf5 \cb1 \strokec5 \
\cb4     \cf3 \strokec3 else\cf5 \strokec5 :\cb1 \
\
\cb4         \cf8 \strokec8 # Caller expects an empty tuple if an empty list was supplied\cf5 \cb1 \strokec5 \
\cb4         min_value \cf3 \strokec3 =\cf5 \strokec5  ()\cb1 \
\
\cb4     \cf3 \strokec3 return\cf5 \strokec5  min_value\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\
\
\
}